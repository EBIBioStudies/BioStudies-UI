image: maven:3-jdk-11
cache:
  paths:
    - target/

stages:
  - build
  - dockerify
  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}

services:
  - docker:dind

.deploy-template: &deploy-template
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - cp "$ssh_key" ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - host0=`awk '{print $1}' <<< $host`
    - scp -oStrictHostKeyChecking=no ./target/biostudies.war "$user"@"$host0":"$deployDirectory"
    - cp "$application_properties" external.properties
    - echo -e "\ngit.commit.id.abbrev=$CI_COMMIT_SHORT_SHA" >> external.properties
    - scp external.properties "$user"@"$host0":"$deployDirectory"/external.properties
    - >
      for host in $host; do
        ssh -oStrictHostKeyChecking=no "$user"@"$host" "$deployDirectory"/restart.sh
        echo "Waiting 220 seconds"
        sleep 220
      done

build-develop:
  stage: build
  artifacts:
    paths:
      - target/biostudies.war
  script:
    - apt-get update
    - driver=$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE -s)
    - wget "https://chromedriver.storage.googleapis.com/$driver/chromedriver_linux64.zip"
    - unzip chromedriver_linux64.zip
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt install ./google-chrome*.deb -y
    - mvn clean install spring-boot:repackage
  environment: dev
  only:
    - develop

build-master:
  stage: build
  artifacts:
    paths:
      - target/biostudies.war
  script:
    - mvn -Dmaven.test.skip=true clean install spring-boot:repackage
  only:
    - master

build-branch:
  stage: build
  artifacts:
    paths:
      - target/biostudies.war
  script:
    - mvn -Dmaven.test.skip=true clean install spring-boot:repackage
  when: manual

push-docker-image:
  image: docker
  stage: dockerify
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg RUN_AS_USER=${RUN_AS_USER} --build-arg RUN_AS_GROUP=${RUN_AS_GROUP} -t ${DOCKER_IMAGE} -t ${CI_REGISTRY_IMAGE}:latest --no-cache .
    - docker push ${DOCKER_IMAGE}
    - docker push ${CI_REGISTRY_IMAGE}:latest
    - docker rmi ${DOCKER_IMAGE}
    - docker rmi ${CI_REGISTRY_IMAGE}:latest
    - docker logout $CI_REGISTRY
  only:
    - master

.deploy-k8s:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache curl gettext
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - cd ci
    - cat "$APP_CONFIG" | kubectl apply -f -
    - envsubst < deployment.tmpl | kubectl apply -f -
    - kubectl rollout restart statefulset "$LABEL" -n "$NAMESPACE"

deploy-branch:
    <<: *deploy-template
    environment: $TARGET_ENVIRONMENT
    when: manual

dev:
  <<: *deploy-template
  environment: dev
  only:
    - develop

beta:
  <<: *deploy-template
  environment: beta
  only:
    - develop
  when: manual

hx-k8s:
  extends: .deploy-k8s
  environment:
    name: hx
  only:
    - master

hl-k8s:
  extends: .deploy-k8s
  environment:
    name: hl
  only:
    - master

preview:
  <<: *deploy-template
  environment: preview
  only:
    - master
  when: manual

prod-backup:
  <<: *deploy-template
  environment: prod-backup
  only:
    - master
  when: manual

prod:
  <<: *deploy-template
  environment: prod
  only:
    - master
  when: manual


